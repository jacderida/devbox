---
- stat: path="{{ rustc_path }}"
  register: rust_path_result

- name: 'get the rustup installer'
  get_url:
    url: "{{ rustup_installer_url }}"
    dest: "{{ rustup_installer_path }}"
    mode: 0775
  when: rust_path_result.stat.exists == False

- name: 'run the rustup installer'
  command: "{{ rustup_installer_path }} --default-toolchain {{ rust_version }} --no-modify-path -y"
  become: yes
  become_user: "{{ dev_user }}"
  when: rust_path_result.stat.exists == False

- name: 'install rustfmt'
  command: "{{ rustup_path }} component add rustfmt-preview"
  become: yes
  become_user: "{{ dev_user }}"

- name: 'link rustfmt to location on PATH for emacs'
  file:
   src: "{{ rustfmt_path }}"
   dest: "/usr/bin/rustfmt"
   state: link

- name: 'install nightly rust for racer (code completion)'
  command: "{{ rustup_path }} toolchain add nightly"
  become: yes
  become_user: "{{ dev_user }}"

- name: 'install rust source for racer (code completion)'
  command: "{{ rustup_path }} component add rust-src"
  become: yes
  become_user: "{{ dev_user }}"

- name: 'create linked rust source path'
  file:
    path: "{{ rust_src_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: 'link toolchain source to common path for emacs code completion'
  file:
    src: "{{ rust_toolchain_src_path }}"
    dest: "{{ rust_src_path }}/src"
    state: link

- stat: path="{{ racer_path }}"
  register: racer_path_result

- debug:
    var: "{{ racer_path_result }}"

- name: 'install racer (code completion)'
  command: "{{ cargo_path }} +nightly install racer"
  become: yes
  become_user: "{{ dev_user }}"
  when: racer_path_result.stat.exists == False

- name: 'install rust language server'
  command: "{{ rustup_path }} component add {{ item }}"
  with_items:
    - rls-preview
    - rust-analysis
  become: yes
  become_user: "{{ dev_user }}"

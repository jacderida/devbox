---
# We won't re-download and extract the archive if this directory exists, indicating we've already done so.
- stat: path="{{ vim_src_path }}/src"
  register: vim_src_path_result

- name: 'create vim source directory'
  file:
    path: "{{ vim_src_path }}"
    state: directory
    mode: 0755
    owner: "{{ dev_user }}"
    group: "{{ dev_user }}"

- name: 'get vim source archive'
  get_url:
    url: "{{ vim_src_url }}"
    dest: "{{ vim_src_archive_path }}"
  become_user: "{{ dev_user }}"
  when: vim_src_path_result.stat.exists == False

# The vim archive already has a folder, so it can be extracted directly to the dev directory.
- name: 'unzip vim source archive'
  unarchive:
    remote_src: yes
    src: "{{ vim_src_archive_path }}"
    dest: "{{ dev_path }}"
  become_user: "{{ dev_user }}"
  when: vim_src_path_result.stat.exists == False

- name: 'remove src archive'
  file:
    state: absent
    name: "{{ vim_src_archive_path }}"

- name: 'configure with python support'
  command: "./configure --enable-pythoninterp"
  args:
    chdir: "{{ vim_src_path }}/src"
    creates: "{{ vim_src_path }}/src/auto/config.h"
  become_user: "{{ dev_user }}"

- stat: path="{{ vim_src_path }}/src/vim"
  register: vim_bin_path_result

- name: 'compile vim'
  make:
    chdir: "{{ vim_src_path }}/src"
  become_user: "{{ dev_user }}"
  when: vim_bin_path_result.stat.exists == False

- stat: path="{{ vim_install_path }}"
  register: vim_install_path_result

- name: 'install vim'
  make:
    chdir: "{{ vim_src_path }}/src"
    target: install
  when: vim_install_path_result.stat.exists == False
